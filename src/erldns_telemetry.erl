%% Copyright (c) 2012-2020, DNSimple Corporation
%%
%% Permission to use, copy, modify, and/or distribute this software for any
%% purpose with or without fee is hereby granted, provided that the above
%% copyright notice and this permission notice appear in all copies.
%%
%% THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
%% WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
%% MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
%% ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
%% WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
%% ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
%% OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

%% @doc Telemetry event handler
-module(erldns_telemetry).

-include_lib("kernel/include/logger.hrl").

-export([init/0, handle_event/4]).

%% @doc Handle telemetry events.
handle_event(EventName, Measurements, Metadata, _Config) ->
  ?LOG_ERROR("~p ~p ~p", [EventName, Measurements, Metadata]).

%% @doc Initialize event handler.
init() ->
  ?LOG_INFO("Initializing Telemetry event handler"),

  Events = [
    % These events come from zone data processing,

    % [erldns, erldns_storage, error]
    % [erldns, erldns_zone_encoder, error],
    % [erldns, erldns_zone_loader, error],
    % [erldns, erldns_zone_parser, error],

    % This event comes after servers have been started after data loaded
    % [erldns, servers, started],

    % These events are generated by request processing,

    % % Number of requests, top level
    % [erldns, request],

    % % Handoff duration, which limits the basic processing speed
    % [erldns, handoff],

    % % Number of requests dropped because no process is available
    % [erldns, dropped],


    % % Worker process, receives packet, parses it, processes and closes socket
    % % [erldns, worker, start], % not particularly interesting
    % [erldns, worker, stop],

    % % Number of invalid messages, i.e. client error, not parsable
    % % No response returned
    % [erldns, invalid],
    %     % reason = qr in worker

    %     % Number of requests with trailing garbage, logged and continue
    %     [erldns, garbage],

    % % Number of errors, i.e. internal processing error
    % % In worker, errors result in no response being returned to client
    % [erldns, error],
    %     % reason = timeout
    %     %     reason = restart_failed is additonal
    %     % reason = exception
    %     % reason = handle, some other error

    % % Response by DNS RCODE
    % [erldns, response],

    %     % Number of refused responses, redundant with response
    %     [erldns, refused],

    %     % Number of empty responses, redundant with response
    %     [erldns, empty],

    %     % In worker_process
    %     % [erldns, process, start], % not particularly interesting
    %     % Duration to encode and send back to client
    %     [erldns, process, stop],

    %         % Response was too big for packet and was truncated, extra
    %         [erldns, truncated],

    %     % Low level processing without concurrency/queueing
    %     % erldns_handler
    %     % Returns response messages

    %         % Number of messages throttled by rate limiter, DNS_RCODE_NOERROR};
    %         [erldns, throttled],

    %         % Number of bad messages returned
    %         % TODO: probably drop due to potential abuse
    %         [erldns, invalid], % reason => bad_message

    %         % Primary processing duration
    %         [erldns, handled],

    %             % Number of packets returned from cache
    %             [erldns, cache, packet, hit],

    %             % Number of packets missed from cache
    %             % This is requests where we actually had to do some work
    %             [erldns, cache, packet, miss],

    %                 [erldns, servfail], % reason => resolve
    %                 % Error in processing, returns SERVFAIL

    %                 % Number of requests which use DNSSEC
    %                 [erldns, dnssec, request]

    % Low level packet cache metrics
    % [erldns, cache, expired],
    % [erldns, cache, hit],
    % [erldns, cache, miss],
  ],
  telemetry:attach_many(?MODULE, Events, fun ?MODULE:handle_event/4, #{}).
